[
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ChatAnthropic",
        "importPath": "langchain_anthropic",
        "description": "langchain_anthropic",
        "isExtraImport": true,
        "detail": "langchain_anthropic",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "BaseChatModel",
        "importPath": "langchain_core.language_models",
        "description": "langchain_core.language_models",
        "isExtraImport": true,
        "detail": "langchain_core.language_models",
        "documentation": {}
    },
    {
        "label": "AnyMessage",
        "importPath": "langchain_core.messages",
        "description": "langchain_core.messages",
        "isExtraImport": true,
        "detail": "langchain_core.messages",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "langchain_core.pydantic_v1",
        "description": "langchain_core.pydantic_v1",
        "isExtraImport": true,
        "detail": "langchain_core.pydantic_v1",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "langchain_core.pydantic_v1",
        "description": "langchain_core.pydantic_v1",
        "isExtraImport": true,
        "detail": "langchain_core.pydantic_v1",
        "documentation": {}
    },
    {
        "label": "add_messages",
        "importPath": "langgraph.graph.message",
        "description": "langgraph.graph.message",
        "isExtraImport": true,
        "detail": "langgraph.graph.message",
        "documentation": {}
    },
    {
        "label": "get_model",
        "kind": 2,
        "importPath": "models.models",
        "description": "models.models",
        "peekOfCode": "def get_model(provider: ModelProvider = \"openai\", streaming: bool = True) -> BaseChatModel:\n    \"\"\"\n    Factory function to create and return a chat model based on the specified provider.\n    Args:\n        provider (ModelProvider): The model provider to use. Defaults to \"openai\".\n        streaming (bool): Whether to enable streaming for the model. Defaults to True.\n    Returns:\n        BaseChatModel: An instance of the specified chat model.\n    Raises:\n        ValueError: If an unsupported provider is specified.",
        "detail": "models.models",
        "documentation": {}
    },
    {
        "label": "ModelProvider",
        "kind": 5,
        "importPath": "models.models",
        "description": "models.models",
        "peekOfCode": "ModelProvider = Literal[\"openai\", \"anthropic\"]\nMODEL_CONFIGS = {\n    \"openai\": {\n        \"class\": ChatOpenAI,\n        \"model\": \"gpt-4o-2024-08-06\",\n    },\n    \"anthropic\": {\n        \"class\": ChatAnthropic,\n        \"model\": \"claude-3-5-sonnet-20240620\",\n    },",
        "detail": "models.models",
        "documentation": {}
    },
    {
        "label": "MODEL_CONFIGS",
        "kind": 5,
        "importPath": "models.models",
        "description": "models.models",
        "peekOfCode": "MODEL_CONFIGS = {\n    \"openai\": {\n        \"class\": ChatOpenAI,\n        \"model\": \"gpt-4o-2024-08-06\",\n    },\n    \"anthropic\": {\n        \"class\": ChatAnthropic,\n        \"model\": \"claude-3-5-sonnet-20240620\",\n    },\n}",
        "detail": "models.models",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "models.models",
        "description": "models.models",
        "peekOfCode": "model = get_model(\"openai\")\nnonstreaming_model = get_model(\"openai\", streaming=False)\n# Configuration for tool binding\ntool_bind_kwargs = {\n    \"tool_choice\": \"auto\",\n    \"parallel_tool_calls\": False\n}",
        "detail": "models.models",
        "documentation": {}
    },
    {
        "label": "nonstreaming_model",
        "kind": 5,
        "importPath": "models.models",
        "description": "models.models",
        "peekOfCode": "nonstreaming_model = get_model(\"openai\", streaming=False)\n# Configuration for tool binding\ntool_bind_kwargs = {\n    \"tool_choice\": \"auto\",\n    \"parallel_tool_calls\": False\n}",
        "detail": "models.models",
        "documentation": {}
    },
    {
        "label": "tool_bind_kwargs",
        "kind": 5,
        "importPath": "models.models",
        "description": "models.models",
        "peekOfCode": "tool_bind_kwargs = {\n    \"tool_choice\": \"auto\",\n    \"parallel_tool_calls\": False\n}",
        "detail": "models.models",
        "documentation": {}
    },
    {
        "label": "QuestionResponse",
        "kind": 6,
        "importPath": "schema",
        "description": "schema",
        "peekOfCode": "class QuestionResponse(BaseModel):\n    question: str = Field(default=\"\", description=\"The question posed to the student\")\n    response: str = Field(default=\"\", description=\"The student's response to the question\")\n    analysis: str = Field(default=\"\", description=\"Analysis of the student's response\")\nclass StudentAssessment(BaseModel):\n    knowledge_recall: QuestionResponse = Field(default_factory=QuestionResponse, description=\"Tests basic recall of facts from the lecture\")\n    comprehension: QuestionResponse = Field(default_factory=QuestionResponse, description=\"Tests understanding of concepts from the lecture\")\n    application: QuestionResponse = Field(default_factory=QuestionResponse, description=\"Tests ability to apply concepts to new situations\")\n    analysis: QuestionResponse = Field(default_factory=QuestionResponse, description=\"Tests ability to break down and examine relationships between concepts\")\n    synthesis: QuestionResponse = Field(default_factory=QuestionResponse, description=\"Tests ability to combine ideas to form new concepts\")",
        "detail": "schema",
        "documentation": {}
    },
    {
        "label": "StudentAssessment",
        "kind": 6,
        "importPath": "schema",
        "description": "schema",
        "peekOfCode": "class StudentAssessment(BaseModel):\n    knowledge_recall: QuestionResponse = Field(default_factory=QuestionResponse, description=\"Tests basic recall of facts from the lecture\")\n    comprehension: QuestionResponse = Field(default_factory=QuestionResponse, description=\"Tests understanding of concepts from the lecture\")\n    application: QuestionResponse = Field(default_factory=QuestionResponse, description=\"Tests ability to apply concepts to new situations\")\n    analysis: QuestionResponse = Field(default_factory=QuestionResponse, description=\"Tests ability to break down and examine relationships between concepts\")\n    synthesis: QuestionResponse = Field(default_factory=QuestionResponse, description=\"Tests ability to combine ideas to form new concepts\")\n    evaluation: QuestionResponse = Field(default_factory=QuestionResponse, description=\"Tests ability to make judgments about the value of ideas or materials\")\n    metacognitive: QuestionResponse = Field(default_factory=QuestionResponse, description=\"Questions about the student's own learning process and understanding\")\nclass StudentLevelAssessment(BaseModel):\n    assessment: StudentAssessment",
        "detail": "schema",
        "documentation": {}
    },
    {
        "label": "StudentLevelAssessment",
        "kind": 6,
        "importPath": "schema",
        "description": "schema",
        "peekOfCode": "class StudentLevelAssessment(BaseModel):\n    assessment: StudentAssessment\n    overall_level: str = Field(description=\"Overall assessment of the student's level based on their responses\")\n    strengths: List[str] = Field(description=\"Areas where the student showed strong understanding\")\n    areas_for_improvement: List[str] = Field(description=\"Areas where the student might benefit from additional study\")\nclass BaseResponse(BaseModel):\n    reason: str\nclass ShouldCreateQuiz(BaseResponse):\n    bool_value: bool = Field(description=\"Whether to create a quiz based on the transcript and student's level. If the student level is not determined, this will always be false.\")\nclass ShouldAnalyzeStudentLevel(BaseResponse):",
        "detail": "schema",
        "documentation": {}
    },
    {
        "label": "BaseResponse",
        "kind": 6,
        "importPath": "schema",
        "description": "schema",
        "peekOfCode": "class BaseResponse(BaseModel):\n    reason: str\nclass ShouldCreateQuiz(BaseResponse):\n    bool_value: bool = Field(description=\"Whether to create a quiz based on the transcript and student's level. If the student level is not determined, this will always be false.\")\nclass ShouldAnalyzeStudentLevel(BaseResponse):\n    \"\"\"\n    Use this to analyze the student's level based on the responses from the student.\n    \"\"\"\n    bool_value: bool = Field(description=\"Whether to analyze the student's level based on the responses from the student. If the student has provided responses to the questions you asked to analyze their level, This will be false.\")\nclass ShouldExtractStudentResponse(BaseResponse):",
        "detail": "schema",
        "documentation": {}
    },
    {
        "label": "ShouldCreateQuiz",
        "kind": 6,
        "importPath": "schema",
        "description": "schema",
        "peekOfCode": "class ShouldCreateQuiz(BaseResponse):\n    bool_value: bool = Field(description=\"Whether to create a quiz based on the transcript and student's level. If the student level is not determined, this will always be false.\")\nclass ShouldAnalyzeStudentLevel(BaseResponse):\n    \"\"\"\n    Use this to analyze the student's level based on the responses from the student.\n    \"\"\"\n    bool_value: bool = Field(description=\"Whether to analyze the student's level based on the responses from the student. If the student has provided responses to the questions you asked to analyze their level, This will be false.\")\nclass ShouldExtractStudentResponse(BaseResponse):\n    \"\"\"\n    Use this to extract the student's assessment response to the questions you asked to analyze their level.",
        "detail": "schema",
        "documentation": {}
    },
    {
        "label": "ShouldAnalyzeStudentLevel",
        "kind": 6,
        "importPath": "schema",
        "description": "schema",
        "peekOfCode": "class ShouldAnalyzeStudentLevel(BaseResponse):\n    \"\"\"\n    Use this to analyze the student's level based on the responses from the student.\n    \"\"\"\n    bool_value: bool = Field(description=\"Whether to analyze the student's level based on the responses from the student. If the student has provided responses to the questions you asked to analyze their level, This will be false.\")\nclass ShouldExtractStudentResponse(BaseResponse):\n    \"\"\"\n    Use this to extract the student's assessment response to the questions you asked to analyze their level.\n    If the student has provided a response to the question for analyzing their level, you can use this to extract it.\n    \"\"\"",
        "detail": "schema",
        "documentation": {}
    },
    {
        "label": "ShouldExtractStudentResponse",
        "kind": 6,
        "importPath": "schema",
        "description": "schema",
        "peekOfCode": "class ShouldExtractStudentResponse(BaseResponse):\n    \"\"\"\n    Use this to extract the student's assessment response to the questions you asked to analyze their level.\n    If the student has provided a response to the question for analyzing their level, you can use this to extract it.\n    \"\"\"\n    bool_value: bool = Field(description=\"If the student has provided a response to the question for analyzing their level, this will be true.\")\nclass ResponseAssessment(BaseModel):\n    \"\"\"\n    Use this to classify the User's response, which is either an answer to one of your questions or a request to create a quiz or analyze the student's level.\n    \"\"\"",
        "detail": "schema",
        "documentation": {}
    },
    {
        "label": "ResponseAssessment",
        "kind": 6,
        "importPath": "schema",
        "description": "schema",
        "peekOfCode": "class ResponseAssessment(BaseModel):\n    \"\"\"\n    Use this to classify the User's response, which is either an answer to one of your questions or a request to create a quiz or analyze the student's level.\n    \"\"\"\n    should_create_quiz: ShouldCreateQuiz\n    should_analyze_student_level: ShouldAnalyzeStudentLevel\n    should_extract_student_response: ShouldExtractStudentResponse\nclass AgentState(BaseModel):\n    messages: Annotated[List[AnyMessage], add_messages] = Field(default_factory=list)\n    route: Optional[str] = Field(default=None)",
        "detail": "schema",
        "documentation": {}
    },
    {
        "label": "AgentState",
        "kind": 6,
        "importPath": "schema",
        "description": "schema",
        "peekOfCode": "class AgentState(BaseModel):\n    messages: Annotated[List[AnyMessage], add_messages] = Field(default_factory=list)\n    route: Optional[str] = Field(default=None)\n    assessment: Optional[StudentLevelAssessment] = Field(default=None)\n    lesson_explanation: Optional[str] = Field(default=None)",
        "detail": "schema",
        "documentation": {}
    },
    {
        "label": "SUMMARIZE_TRANSCRIPT",
        "kind": 5,
        "importPath": "schema",
        "description": "schema",
        "peekOfCode": "SUMMARIZE_TRANSCRIPT = \"summarize_transcript\"\nANALYZE_STUDENT_LEVEL = \"analyze_student_level\"\nCREATE_QUIZ = \"create_quiz\"\nROUTER = \"router\"\nEXTRACT_STUDENT_RESPONSE = \"extract_student_response\"\nclass QuestionResponse(BaseModel):\n    question: str = Field(default=\"\", description=\"The question posed to the student\")\n    response: str = Field(default=\"\", description=\"The student's response to the question\")\n    analysis: str = Field(default=\"\", description=\"Analysis of the student's response\")\nclass StudentAssessment(BaseModel):",
        "detail": "schema",
        "documentation": {}
    },
    {
        "label": "ANALYZE_STUDENT_LEVEL",
        "kind": 5,
        "importPath": "schema",
        "description": "schema",
        "peekOfCode": "ANALYZE_STUDENT_LEVEL = \"analyze_student_level\"\nCREATE_QUIZ = \"create_quiz\"\nROUTER = \"router\"\nEXTRACT_STUDENT_RESPONSE = \"extract_student_response\"\nclass QuestionResponse(BaseModel):\n    question: str = Field(default=\"\", description=\"The question posed to the student\")\n    response: str = Field(default=\"\", description=\"The student's response to the question\")\n    analysis: str = Field(default=\"\", description=\"Analysis of the student's response\")\nclass StudentAssessment(BaseModel):\n    knowledge_recall: QuestionResponse = Field(default_factory=QuestionResponse, description=\"Tests basic recall of facts from the lecture\")",
        "detail": "schema",
        "documentation": {}
    },
    {
        "label": "CREATE_QUIZ",
        "kind": 5,
        "importPath": "schema",
        "description": "schema",
        "peekOfCode": "CREATE_QUIZ = \"create_quiz\"\nROUTER = \"router\"\nEXTRACT_STUDENT_RESPONSE = \"extract_student_response\"\nclass QuestionResponse(BaseModel):\n    question: str = Field(default=\"\", description=\"The question posed to the student\")\n    response: str = Field(default=\"\", description=\"The student's response to the question\")\n    analysis: str = Field(default=\"\", description=\"Analysis of the student's response\")\nclass StudentAssessment(BaseModel):\n    knowledge_recall: QuestionResponse = Field(default_factory=QuestionResponse, description=\"Tests basic recall of facts from the lecture\")\n    comprehension: QuestionResponse = Field(default_factory=QuestionResponse, description=\"Tests understanding of concepts from the lecture\")",
        "detail": "schema",
        "documentation": {}
    },
    {
        "label": "ROUTER",
        "kind": 5,
        "importPath": "schema",
        "description": "schema",
        "peekOfCode": "ROUTER = \"router\"\nEXTRACT_STUDENT_RESPONSE = \"extract_student_response\"\nclass QuestionResponse(BaseModel):\n    question: str = Field(default=\"\", description=\"The question posed to the student\")\n    response: str = Field(default=\"\", description=\"The student's response to the question\")\n    analysis: str = Field(default=\"\", description=\"Analysis of the student's response\")\nclass StudentAssessment(BaseModel):\n    knowledge_recall: QuestionResponse = Field(default_factory=QuestionResponse, description=\"Tests basic recall of facts from the lecture\")\n    comprehension: QuestionResponse = Field(default_factory=QuestionResponse, description=\"Tests understanding of concepts from the lecture\")\n    application: QuestionResponse = Field(default_factory=QuestionResponse, description=\"Tests ability to apply concepts to new situations\")",
        "detail": "schema",
        "documentation": {}
    },
    {
        "label": "EXTRACT_STUDENT_RESPONSE",
        "kind": 5,
        "importPath": "schema",
        "description": "schema",
        "peekOfCode": "EXTRACT_STUDENT_RESPONSE = \"extract_student_response\"\nclass QuestionResponse(BaseModel):\n    question: str = Field(default=\"\", description=\"The question posed to the student\")\n    response: str = Field(default=\"\", description=\"The student's response to the question\")\n    analysis: str = Field(default=\"\", description=\"Analysis of the student's response\")\nclass StudentAssessment(BaseModel):\n    knowledge_recall: QuestionResponse = Field(default_factory=QuestionResponse, description=\"Tests basic recall of facts from the lecture\")\n    comprehension: QuestionResponse = Field(default_factory=QuestionResponse, description=\"Tests understanding of concepts from the lecture\")\n    application: QuestionResponse = Field(default_factory=QuestionResponse, description=\"Tests ability to apply concepts to new situations\")\n    analysis: QuestionResponse = Field(default_factory=QuestionResponse, description=\"Tests ability to break down and examine relationships between concepts\")",
        "detail": "schema",
        "documentation": {}
    }
]